#!/usr/bin/env bash
## -----------------------------------------------------------------------------
## entrypoint.sh — Startlogik für GlusterFS im Container
## Zweck:
##   - glusterd  # Management Daemon starten  # Gluster Management Daemon starten starten und auf Bereitschaft prüfen
##   - idempotente Volume-Erstellung (wenn MODE=init und CREATE_VOLUME=1)
##   - Brick-Verzeichnisse vorbereiten (BRICK_PATHS) und Volume-Optionen setzen
## Wichtige ENV-Variablen (aus .env):
##   VOLNAME, VTYPE, REPLICA, CREATE_VOLUME, ALLOW_FORCE_CREATE, BRICK_PATHS,
##   AUTH_ALLOW, VOL_OPTS, NFS_DISABLE, ADDRESS_FAMILY, MAX_PORT, TZ, LOG_LEVEL
## Hinweis: Nur Kommentare hinzugefügt — keine Verhaltensänderungen.
## -----------------------------------------------------------------------------
#!/usr/bin/env bash
\
#!/usr/bin/env bash
set -euo pipefail

# ---------- Tiny logger ----------
ts(){ date -u +"[%Y-%m-%dT%H:%M:%S+00:00]"; }
info(){ echo "$(ts) [INFO] $*"; }
ok(){   echo "$(ts) [OK]   $*"; }
warn(){ echo "$(ts) [WARN] $*"; }
err(){  echo "$(ts) [ERR]  $*" >&2; }

# ---------- Config (ENV) ----------
MODE="${MODE:-init}"                       # init|brick
VOLNAME="${VOLNAME:-gv0}"
REPLICA="${REPLICA:-1}"
VTYPE="${VTYPE:-replica}"                  # replica|disperse
BRICK_PATH="${BRICK_PATH:-/bricks/brick1}"
BRICK_PATHS="${BRICK_PATHS:-}"
PEERS="${PEERS:-}"
REQUIRE_ALL_PEERS="${REQUIRE_ALL_PEERS:-0}"
ALLOW_FORCE_CREATE="${ALLOW_FORCE_CREATE:-1}"
ALLOW_EMPTY_STATE="${ALLOW_EMPTY_STATE:-1}"
LOG_LEVEL="${LOG_LEVEL:-INFO}"
AUTH_ALLOW="${AUTH_ALLOW:-}"
CREATE_VOLUME="${CREATE_VOLUME:-1}"
UMASK="${UMASK:-022}"
TZ="${TZ:-UTC}"
ADDRESS_FAMILY="${ADDRESS_FAMILY:-inet}"
MAX_PORT="${MAX_PORT:-60999}"
TRANSPORT="${TRANSPORT:-tcp}"
VOL_OPTS="${VOL_OPTS:-network.ping-timeout=5,performance.client-io-threads=on}"
NFS_DISABLE="${NFS_DISABLE:-1}"

# ---------- Helpers ----------
        ensure_glusterd_vol() {
          local vol="/etc/glusterfs/glusterd.vol"
          mkdir -p /etc/glusterfs /var/lib/glusterd /var/log/glusterfs /run/gluster
          if [[ ! -s "$vol" ]]; then
            cat >"$vol" <<VOL
# Autogenerated by entrypoint
include "glusterfs-core.vol"
volume management
    type mgmt/glusterd
    option working-directory /var/lib/glusterd
    option transport.address-family ${ADDRESS_FAMILY}
    option max-port ${MAX_PORT}
end-volume
VOL
          else
            grep -q 'option[[:space:]]\+transport.address-family' "$vol" || \
              sed -i '/type mgmt\/glusterd/a\    option transport.address-family '"${ADDRESS_FAMILY}" "$vol"
            grep -q 'option[[:space:]]\+max-port' "$vol" || \
              sed -i '/type mgmt\/glusterd/a\    option max-port '"${MAX_PORT}" "$vol"
          fi
        }

start_glusterd(){
  ensure_glusterd_vol
  glusterd -N --log-level "$LOG_LEVEL" &
  local pid=$!
  sleep 0.5
  kill -0 "$pid" 2>/dev/null || { err "glusterd start fehlgeschlagen"; exit 1; }
  for i in {1..60}; do
    gluster volume info  # Healthcheck  # Healthcheck: Volumes abfragen >/dev/null 2>&1 && return 0
    sleep 0.5
  done
  err "glusterd startete nicht rechtzeitig."; exit 1
}

brick_list(){
  local arr=("$BRICK_PATH")
  if [[ -n "$BRICK_PATHS" ]]; then IFS=',' read -r -a extras <<< "$BRICK_PATHS"; arr+=("${extras[@]}"); fi
  local out=(); for b in "${arr[@]}"; do [[ -n "$b" ]] && [[ ! " ${out[*]} " =~ " $b " ]] && out+=("$b"); done
  echo "${out[@]}"
}

ensure_bricks(){
  local arr; read -r -a arr <<< "$(brick_list)"
  for bp in "${arr[@]}"; do mkdir -p "$bp"; done
}

volume_exists(){ gluster volume info "$VOLNAME" >/dev/null 2>&1; }
ensure_volume_started(){ gluster volume status "$VOLNAME" >/dev/null 2>&1 || gluster volume start "$VOLNAME" >/dev/null
# Apply volume options from VOL_OPTS (comma-separated key=value)
IFS=',' read -r -a _opt_pairs <<< "${VOL_OPTS}"
for kv in "${_opt_pairs[@]}"; do
  [[ -z "$kv" ]] && continue
  key="${kv%%=*}"; val="${kv#*=}"
  if [[ -n "$key" && -n "$val" ]]; then
    gluster volume set "$VOLNAME" "$key" "$val" >/dev/null || true
  fi
done
# If AUTH_ALLOW is provided, restrict clients
if [[ -n "${AUTH_ALLOW}" ]]; then
  gluster volume set "$VOLNAME" auth.allow "${AUTH_ALLOW}" >/dev/null || true
fi

# Optionally disable NFS translator
if [[ "${NFS_DISABLE}" == "1" ]]; then
  gluster volume set "$VOLNAME" nfs.disable on >/dev/null || true
fi; }

create_volume_solo(){
  local arr; read -r -a arr <<< "$(brick_list)"
  ensure_bricks
  local host="${HOSTNAME:-$(hostname -s)}"
  local spec=(); for bp in "${arr[@]}"; do spec+=("${host}:${bp}"); done
  local force=""; [[ "$ALLOW_FORCE_CREATE" == "1" ]] && force="force"
  case "$VTYPE" in
    replica) info "Erzeuge Volume: volume create ${VOLNAME} replica ${REPLICA} transport ${TRANSPORT} ${spec[*]} ${force}"
             gluster volume create  # nur falls nicht vorhanden  # Idempotent: nur wenn nicht vorhanden "$VOLNAME" replica "$REPLICA" transport ${TRANSPORT} "${spec[@]}" ${force:+force} >/dev/null ;;
    *) err "VTYPE=${VTYPE} im Solo-Setup nicht unterstützt"; exit 1;;
  esac
  gluster volume start "$VOLNAME" >/dev/null
# Apply volume options from VOL_OPTS (comma-separated key=value)
IFS=',' read -r -a _opt_pairs <<< "${VOL_OPTS}"
for kv in "${_opt_pairs[@]}"; do
  [[ -z "$kv" ]] && continue
  key="${kv%%=*}"; val="${kv#*=}"
  if [[ -n "$key" && -n "$val" ]]; then
    gluster volume set "$VOLNAME" "$key" "$val" >/dev/null || true
  fi
done
# If AUTH_ALLOW is provided, restrict clients
if [[ -n "${AUTH_ALLOW}" ]]; then
  gluster volume set "$VOLNAME" auth.allow "${AUTH_ALLOW}" >/dev/null || true
fi

# Optionally disable NFS translator
if [[ "${NFS_DISABLE}" == "1" ]]; then
  gluster volume set "$VOLNAME" nfs.disable on >/dev/null || true
fi
  gluster volume set "$VOLNAME" network.ping-timeout 5 >/dev/null || true
  gluster volume set "$VOLNAME" performance.client-io-threads on >/dev/null || true
}

# ---------- Start ----------
# Set umask & timezone
umask "${UMASK}" || true
if [[ -n "${TZ}" ]]; then
  ln -snf "/usr/share/zoneinfo/${TZ}" /etc/localtime || true
  echo "${TZ}" > /etc/timezone || true
fi

info "===== Startparameter ====="
env | grep -E '^(MODE|VOLNAME|REPLICA|VTYPE|BRICK_PATH|BRICK_PATHS|PEERS|REQUIRE_ALL_PEERS|ALLOW_FORCE_CREATE|ALLOW_EMPTY_STATE|LOG_LEVEL)=' | LC_ALL=C sort | sed 's/^/  /'

start_glusterd

case "$MODE" in
  init)
    info "Modus: INIT"
    if volume_exists; then
      info "Volume ${VOLNAME} existiert bereits."
      ensure_volume_started
    else
      create_volume_solo
    fi
    ;;
  brick)
    info "Modus: BRICK"
    ensure_bricks
    ;;
  *)
    err "Unbekannter MODE=$MODE"; exit 1;;
esac

ok "Bereit; Folge Logs:"
exec tail -F /var/log/glusterfs/*.log