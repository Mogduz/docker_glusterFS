# .env.example — kopiere zu .env und passe Werte an
#
# Dieses File liefert sinnvolle Standardwerte, gruppiert und mit Hinweisen
# zu erlaubten Werten. Es gibt **keine Variablen-Expansion** in .env-Dateien,
# daher müssen abhängige Werte (z.B. MAX_PORT und DATA_PORT_END) manuell
# konsistent gehalten werden.

# ----------------------------------------------------------------------------
# Runtime & Container Identity
# ----------------------------------------------------------------------------
# Name des Containers (Compose "container_name").
CONTAINER_NAME=gluster-solo
# Hostname im Container (taucht in gluster peer/volume info auf).
HOSTNAME_GLUSTER=gluster-solo
# Zeitzone im Container.
# Beispiele: UTC, Europe/Berlin
TZ=UTC
# Default-Umask für Prozesse im Container (z.B. 0022, 0002).
UMASK=0022
# Log-Level für den Entrypoint (nicht Gluster-intern).
# Erlaubt: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# ----------------------------------------------------------------------------
# Health Check
# ----------------------------------------------------------------------------
# Intervall zwischen Healthchecks (z.B. 10s, 30s, 1m).
HC_INTERVAL=10s
# Timeout für einen Versuch.
HC_TIMEOUT=5s
# Startverzögerung, bevor Healthchecks beginnen.
HC_START_PERIOD=30s
# Anzahl Retries bis "unhealthy".
HC_RETRIES=20

# ----------------------------------------------------------------------------
# Networking & Ports
# ----------------------------------------------------------------------------
# Management-Ports des Gluster-Dienstes (glusterd).
# Standard: 24007/tcp (optional 24008/tcp für RPC-Services je nach Version)
MGMT_PORT1=24007
MGMT_PORT2=24008

# Datenport-Range für glusterfsd (Bricks). Standard 49152–49251.
# WICHTIG: Diese Range muss 1) in Docker/Compose veröffentlicht werden und
# 2) an der Host-Firewall erlaubt sein.
DATA_PORT_START=49152
DATA_PORT_END=49251

# Private Host-IP (optional). Wird für /etc/hosts und Verbindungsaufbau genutzt.
# Beispiel: 10.1.0.3
PRIVATE_IP=10.1.0.3

# Adressfamilie für Gluster (inet=IPv4, inet6=IPv6).
# Erlaubt: inet, inet6
ADDRESS_FAMILY=inet

# Obergrenze für Ports in glusterd.vol (Sicherheitskappe).
# MUSS mit DATA_PORT_END übereinstimmen (keine Variablen-Expansion möglich).
MAX_PORT=49251

# ----------------------------------------------------------------------------
# Brick Mapping (Host -> Container)
# ----------------------------------------------------------------------------
# Es werden zwei Bricks per Umgebungsvariablen unterstützt (HOST_BRICK1/2).
# Diese werden im Container unter /bricks/brick1 bzw. /bricks/brick2 gemountet.
# Für mehr Bricks ggf. Compose-Datei erweitern.
HOST_BRICK1=/mnt/brick1
HOST_BRICK2=/mnt/brick2

# ----------------------------------------------------------------------------
# Gluster Volume Settings
# ----------------------------------------------------------------------------
# Betriebsmodus:
#   init  = Volume darf erstellt/gestartet werden
#   brick = Container dient nur als Brick-Server (keine Volume-Erstellung)
MODE=init

# Volumename
VOLNAME=gv0

# Volume-Typ
#   replica    = Replika-Set (REPLICA gibt Anzahl an; i.d.R. 2)
#   distribute = Verteilung ohne Replikation
#   disperse   = Erasure Coding (nicht in diesem Stack automatisiert)
VTYPE=replica

# Replika-Anzahl (nur relevant für VTYPE=replica).
# Auf Single-Host-Tests ist replica-2 möglich (mit --force beim Create).
REPLICA=2

# Transport-Typ (tcp empfohlen).
# Erlaubt: tcp
TRANSPORT=tcp

# Volume bei Bedarf erstellen (1=yes, 0=no).
CREATE_VOLUME=1

# "Force" bei nicht-interaktiven Create-Operationen erlauben (1=yes).
# Für replica-2/Single-Node in der Regel nötig.
ALLOW_FORCE_CREATE=1

# Volume-Optionen (Komma-separiert), die nach der Erstellung gesetzt werden.
# Beispiele:
#   performance.client-io-threads=on
#   cluster.quorum-type=auto
VOL_OPTS=performance.client-io-threads=on,cluster.quorum-type=auto

# Welche Clients dürfen mounten (auth.allow).
# Typische private Netze eingefügt; für Produktion enger fassen.
AUTH_ALLOW=10.1.0.0/16,172.16.0.0/12,192.168.0.0/16

# NFS-Translator deaktivieren (1=yes).
NFS_DISABLE=1

# ----------------------------------------------------------------------------
# Multi-Host & Advanced (optional)
# ----------------------------------------------------------------------------
# Komma-separierte Peer-Hosts (Hostnames/IPs) für Clusterbetrieb.
PEERS=
# Wenn 1, auf alle Peers warten bevor fortgefahren wird (nur relevant mit PEERS).
REQUIRE_ALL_PEERS=0
# Start mit leerem /var/lib/glusterd-Zustand zulassen (0=no).
ALLOW_EMPTY_STATE=0

# ----------------------------------------------------------------------------
# Hinweise & Fallstricke
# ----------------------------------------------------------------------------
# - MAX_PORT und DATA_PORT_END müssen identisch sein (hier beide 49251).
# - Compose/Firewall müssen die Datenport-Range (49152–49251) **und**
#   die Management-Ports (24007–24008) veröffentlichen/erlauben.
# - Bei VTYPE=replica und REPLICA=2 auf einem Single-Host: nur zu Testzwecken.
#   Produktion: Replica über mehrere Hosts.
# - AUTH_ALLOW sollte die tatsächlichen Client-Netze abdecken (Docker nutzt oft 172.16.0.0/12).
